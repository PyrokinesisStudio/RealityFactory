// qxTerrainMgr.cpp: implementation of the qxTerrainMgr class.
//
// Author: Jeff Thelen
//
// Copyright 2000 Quixotic, Inc.  All Rights Reserved.
//////////////////////////////////////////////////////////////////////

#include "..\\RabidFramework.h"
#include "qxTerrainUtils.h"
#include "qxTerrainMap.h"
#include "qxTerrainMapBase.h"
//#include "qxPolyQuad.h"
#include "qxColor.h"
#include "qxCloudMachine.h"
#include "qxSun.h"
#include "qxMoon.h"
#include "qxStars.h"
#include "qxEffectTextureFlow.h"
#include "qxTerrainDefinitionFile.h"
#include "qxSkyDome.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////


qxTerrainMgr::qxTerrainMgr()
:m_bRenderWireframe(false)
,m_pCloudMachine(0)
,m_pSun(0)
,m_pMoon(0)
,m_pStarField(0)
,m_pSkyDome(0)
,m_fTwilightPercent(0.0)
{
	
}

qxTerrainMgr::~qxTerrainMgr()
{
	Shutdown();
}

bool qxTerrainMgr::Init()
{
	AttrFile.SetPath("terrain.ini");
	if(!AttrFile.ReadFile())
	{
		CCD->ReportError("Can't open Terrain initialization file", false);
		return false;
	}
	CString KeyName = AttrFile.FindFirstKey();
	while(KeyName != "")
	{
		if(!strcmp(KeyName,"Terrain"))
		{
			m_fScaleXZ = (float)AttrFile->GetValueF(KeyName, "terrainxzscale");
			m_nLandscapeSize = AttrFile->GetValueI(KeyName, "landscapesize");
			m_nLandscapeSize		*= m_fScaleXZ;

			m_fTwilightDistanceFromHorizon = (float)AttrFile->GetValueF(KeyName, "twilightdistance");
			int SkyMaxHeight = AttrFile->GetValueI(KeyName, "skymaxheight");
			float fScaleXZ = (float)AttrFile->GetValueF(KeyName, "skyscalexz");
			float fSkyLengthHeight = AttrFile->GetValueF(KeyName, "skylengthheight");

			qxTerrainDefinition Def;
			Def.m_strBmp = AttrFile->GetValue(KeyName, "skybmp");
			Def.m_strAlpha	= AttrFile->GetValue(KeyName, "skybmpalpha");

			m_pSkyDome = new qxSkyDome(	Def, fSkyLengthHeight, SkyMaxHeight, 
				fScaleXZ);
			
			if( !m_pSkyDome->Init() )
				return false;
			
			
			m_pSun = new qxSun;
			if( !m_pSun->Init())
				return false;
			
			m_pMoon = new qxMoon;
			if( !m_pMoon->Init())
				return false;
			
			m_pStarField = new qxStarField;
			if( !m_pStarField->Init())
				return false;

			m_pCloudMachine = new qxCloudMachine;
			if( !m_pCloudMachine->Init())
				return false;
			
			m_pCloudMachine->DoWhiteFluffy();
			return true;
		}
		KeyName = AttrFile->FindNextKey();
	}
	
	
	
	return false;
	
}

void qxTerrainMgr::Shutdown()
{

	delete m_pSun;
	delete m_pMoon;
	delete m_pStarField;
	delete m_pSkyDome;
	delete m_pCloudMachine;
}




bool qxTerrainMgr::Frame()
{
	//
	// Rotate the planet
	//

	SetEarthAxis();

	if( m_pSun )
		m_pSun->Frame();

	UpdateTwilightPercent();

	if( m_pSkyDome )
		m_pSkyDome->Frame();

	if( m_pCloudMachine)
		m_pCloudMachine->Frame();

	if( m_pMoon )
		m_pMoon->Frame();
		
	if( m_pStarField )
		m_pStarField->Frame();

	UpdateFog();

	return true;
}



bool qxTerrainMgr::Render()
{

	if(m_pSkyDome)
	{
		if( m_bRenderWireframe )
			m_pSkyDome->RenderWireframe();
		else
			m_pSkyDome->Render();
	}

	return true;
}

void qxTerrainMgr::Draw()
{

	m_pCloudMachine->Draw();

	if(m_pSun)
		m_pSun->Draw();

	if(m_pSkyDome)
		m_pSkyDome->Draw();
}

void qxTerrainMgr::ToggleRenderWireframe()
{
	m_bRenderWireframe = !m_bRenderWireframe; 
}

void qxTerrainMgr::SetEarthAxis(  )
{
	const qxGameTime* pGameTime = Supervisor()->GetGameTime();
	
	int nSeconds =		(pGameTime->m_DateTime.GetSecond()
		+	(pGameTime->m_DateTime.GetMinute()*60)
		+	(pGameTime->m_DateTime.GetHour()*3600) );
	
	
	float RotateY = RADIANS( .0041667f * nSeconds );
	
	geXForm3d_SetIdentity(&m_matEarthRotation);

	float RotateX  = Supervisor()->GetPlayerLatitudeRotation();


	geXForm3d_RotateY(&m_matEarthRotation, RotateY );
	geXForm3d_RotateX(&m_matEarthRotation, RotateX );

}

void qxTerrainMgr::UpdateFog()
{
	qxSkyDome* pSky = GetSkyDome();
	
	if( pSky )
	{
		float fIntensity = pSky->GetSunIntensity();
		fIntensity = m_fTwilightPercent;

		// intensity = 1.0, fogend = landscape*.4 ( fully obscuring )
		// intensity = 0.0, fogend = landscape*1.0 (not fully obscuring)
		fIntensity = (1.0-fIntensity); // 1.0 at 0 intensity, 0.0 at full intensity
		
		float fFogEnd = (m_nLandscapeSize*.5);
		fFogEnd += (fFogEnd*fIntensity);
		
		float fFogStart = (fFogEnd*.20);
		CCD->Engine()->SetFogParameters(*pSky->GetCurrentSkyColor(), fFogStart, fFogEnd);
	
	}
}

float qxTerrainMgr::GetSunPercentToZenith()
{  
	return m_pSun->GetPercentToZenith(); 
}

void qxTerrainMgr::UpdateTwilightPercent()
{
	// -1.0 midnight, 1.0 noon
	float fSunPercentToZenith = GetSunPercentToZenith();

	// distance above and below horizon 
	float fTwilightDist = GetTwilightDistanceFromHorizon();

	// Twilight distance is 0.0 to 1.0
	m_fTwilightPercent = (fSunPercentToZenith+fTwilightDist)/ (fTwilightDist*2) ;
	m_fTwilightPercent = GE_CLAMP(m_fTwilightPercent, 0.0f, 1.0f);

	
}